; 采用 16 位实模式代码
BITS 16
ORG 0x7C00 ; BIOS 会将引导扇区加载到内存 0x7C00

;------------------------------------------------------------------------------
; 1) 引导指令（最前方 3 字节）
; jmp + nop 用来跳过后续的 BPB（BIOS Parameter Block）。
;------------------------------------------------------------------------------
jmp start
nop

;------------------------------------------------------------------------------
; 2) BPB（BIOS Parameter Block）
; 定义 FAT12 引导扇区所需的文件系统参数。
;------------------------------------------------------------------------------
OEMLabel db "MYFAT12 " ; OEM 标识符（8 个字节）
BytesPerSector dw 512 ; 每扇区字节数：512
SectorsPerCluster db 1 ; 每簇扇区数：1
ReservedSectors dw 1 ; 保留扇区数：1（即引导扇区本身）
NumberOfFATs db 2 ; FAT 表数量：2
RootDirEntries dw 224 ; 根目录支持 224 条目录项
TotalSectors dw 2880 ; 总扇区数：1.44MB软盘=2880扇区
MediaDescriptor db 0xF0 ; 媒体描述符：0xF0 软盘
SectorsPerFAT dw 9 ; 每个 FAT 表占 9 个扇区
SectorsPerTrack dw 18 ; 每磁道 18 扇区
NumberOfHeads dw 2 ; 磁头数：2
HiddenSectors dd 0 ; 隐藏扇区数：0
TotalSectorsBig dd 0 ; 若扇区>65535用此字段；软盘无需

;------------------------------------------------------------------------------
; 3) 引导代码（Bootstrap Code）
; 一个简单的示例：启动后打印信息，然后 HLT 停机。
;------------------------------------------------------------------------------
start:
mov si, msg
call print_string
hlt ; 停机

;------------------------------------------------------------------------------
; 4) 简单的字符串输出子程序
;------------------------------------------------------------------------------
print_string:
mov ah, 0x0E ; BIOS 0x10 中断, teletype 模式打印字符
.next_char:
lodsb ; 从 [SI] 取下一个字符到 AL，并 SI++
cmp al, 0
je .done
int 0x10 ; 通过 BIOS 中断打印 AL 中的字符
jmp .next_char
.done:
ret

; 这里定义要显示的引导信息
msg db "FAT12 Booting...", 0x0D, 0x0A, 0

; 填充至引导扇区 510 字节
times 510 - ($ - $$) db 0
dw 0xAA55 ; 引导扇区结束标志（必须是 0xAA55）

;------------------------------------------------------------------------------
; 5) FAT1
; 第一份 FAT 表，共 9 个扇区(9×512=4608 字节)。
; FAT12 第一字节为媒体描述符，随后紧跟保留簇的结束标记。
; 我们在此把簇号2标记为EOF，用于存储HELLO.TXT。
;------------------------------------------------------------------------------
FAT1:
db 0xF0, 0xFF, 0xFF, 0xFF, 0xFF ; 0xF0：媒体描述符，随后标记簇0、1保留，簇2 EOF
times 512*9 - 5 db 0x00 ; 填满 9 扇区剩余空间

;------------------------------------------------------------------------------
; 6) FAT2
; 第二份 FAT 表，内容与 FAT1 完全一致（镜像）。
;------------------------------------------------------------------------------
FAT2:
db 0xF0, 0xFF, 0xFF, 0xFF, 0xFF
times 512*9 - 5 db 0x00

;------------------------------------------------------------------------------
; 7) 根目录区域 (Root Directory)
; 占用 224 项，每项 32 字节，总共 14 扇区(14×512=7168 字节)。
; 在这里我们创建一个 "HELLO.TXT" 文件的条目。
;------------------------------------------------------------------------------
RootDirectory:
; --------------- 文件条目 ---------------
; 文件名部分：8字节
db "HELLO   " ; 文件名 “HELLO”, 右侧补空格至8字节
db "TXT" ; 扩展名 “TXT”
db 0x20 ; 文件属性(0x20=普通文件)
times 10 db 0x00 ; 保留字段
dw 0x0000 ; 时间 (可设为0)
dw 0x0000 ; 日期 (可设为0)
dw 2 ; 起始簇号 (文件放在簇2)
dd 18 ; 文件大小 (18 字节，“Hello yeqianfeng”)
; --------------- 填充根目录剩余空间 ---------------
times (32 * 224) - 32 db 0

;------------------------------------------------------------------------------
; 8) 数据区域 (Data Area)
; 从第33扇区开始，直到最后(2847 扇区)。
; 在这里写入 HELLO.TXT 的内容 (簇2)，然后剩余空间填0。
;------------------------------------------------------------------------------
DataArea:
db "Hello yeqianfeng", 0x0D, 0x0A ; 文件实际内容(18字节)
times 512*2847 - ($-$$) db 0x00 ; 填充剩余空间

; 整个镜像: [1引导扇区] + [9扇区FAT1] + [9扇区FAT2] + [14扇区根目录] + [2847扇区数据]
; 注: 1 + 9 + 9 + 14 + 2847 = 2880 (正好 1.44MB)
;------------------------------------------------------------------------------
; END
;------------------------------------------------------------------------------